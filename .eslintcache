[{"D:\\Todo-Management\\src\\index.js":"1","D:\\Todo-Management\\src\\reportWebVitals.js":"2","D:\\Todo-Management\\src\\App.jsx":"3","D:\\Todo-Management\\src\\components\\todo\\TodoApp.jsx":"4"},{"size":517,"mtime":1608225381871,"results":"5","hashOfConfig":"6"},{"size":375,"mtime":1608225381871,"results":"7","hashOfConfig":"6"},{"size":297,"mtime":1608301004702,"results":"8","hashOfConfig":"6"},{"size":6301,"mtime":1608301269866,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},"1t8kl9k",{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"15","messages":"16","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"12"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},"D:\\Todo-Management\\src\\index.js",[],["20","21"],"D:\\Todo-Management\\src\\reportWebVitals.js",[],"D:\\Todo-Management\\src\\App.jsx",[],"D:\\Todo-Management\\src\\components\\todo\\TodoApp.jsx",["22"],"import React,  {Component} from \"react\";\r\nimport { BrowserRouter as Router,Route, Switch, Link} from \"react-router-dom\";\r\n\r\nclass TodoApp extends Component{\r\n    render(){\r\n        return(\r\n            <div className=\"TodoApp\">\r\n\r\n                {/*implementing Routing for the login and welcome components*/}\r\n                <Router>\r\n                    \r\n                    <>  \r\n                    <HeaderComponent/>\r\n                        {/*switch make sure that only one of these routes is active at any particular point in time.*/}\r\n                        <Switch>\r\n                            <Route path=\"/\" exact component={LoginComponent}/>\r\n                            <Route path=\"/welcome/:name\" component={WelcomeComponent}/>\r\n                            <Route path=\"/login\" component={LoginComponent}/>\r\n                            <Route path=\"/todos\" component={ListTodosComponent}/>\r\n                            <Route component={ErrorComponent}/>\r\n                        </Switch>\r\n                    </>\r\n                    <FooterComponent/>\r\n                </Router>\r\n                \r\n              { /* <WelcomeComponent/>\r\n                <LoginComponent/>*/}\r\n                \r\n                \r\n            </div>\r\n             \r\n        );\r\n    }\r\n}\r\n\r\nfunction ErrorComponent() {\r\n    return <div>An error is Ouccured. I don't now what to do</div>    \r\n}\r\n\r\nclass ListTodosComponent extends Component{\r\n    constructor(props){\r\n        super(props)\r\n        this.state={\r\n            todos :\r\n            [\r\n            {id: 1 , description : 'Learn React', done:false, targetDate: new Date()},\r\n            {id: 2 , description : 'Go to Gym', done:false, targetDate: new Date()},\r\n            {id: 3 , description : 'Do Homework', done:false, targetDate: new Date()}\r\n            ]\r\n        }\r\n\r\n\r\n    }\r\n    render(){\r\n        return(\r\n            <div>\r\n                <h1>List Todos</h1>\r\n                <table>\r\n                    <thead>\r\n                        <tr>\r\n                            <th>id</th>\r\n                            <th>description</th>\r\n                            <th>done</th>\r\n                            <th>targetDate</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {\r\n                            this.state.todos.map(\r\n                            todo =>\r\n                                <tr>\r\n                                    <td>{todo.id}</td>\r\n                                    <td>{todo.description}</td>\r\n                                    <td>{todo.done.toString()}</td>\r\n                                    <td>{todo.targetDate.toString()}</td>\r\n\r\n                                </tr>\r\n                            )\r\n                         }\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nclass HeaderComponent extends Component{\r\n    render(){\r\n        return(\r\n            <header>\r\n                <nav className=\"navbar navbar-expand-md navbar-dark bg-dark\">\r\n                    <div><a className=\"navbar-brand\">Todo</a></div>\r\n                    <ul className=\"navbar-nav\">\r\n                        <li ><Link className=\"nav-link\" to=\"/welcome/name\">Home</Link></li>\r\n                        <li ><Link className=\"nav-link\" to=\"/todos\">Todos</Link></li>\r\n                    </ul>\r\n                    <ul className=\"navbar-nav navbar-collapse justify-content-end \">\r\n                        <li ><Link className=\"nav-link\" to=\"/login\">LogIn</Link></li>\r\n                        <li ><Link className=\"nav-link\" to=\"/logout\">LogOut</Link></li>\r\n                    </ul>\r\n                </nav>\r\n            </header>\r\n        )\r\n    }\r\n}\r\nclass FooterComponent extends Component{\r\n    render(){\r\n        return(\r\n            <div>\r\n              <hr/> Footer \r\n            </div>\r\n        )\r\n    }\r\n}\r\nclass WelcomeComponent extends Component{\r\n    render(){\r\n        return(\r\n            <div>\r\n                Welcome {this.props.match.params.name}. You Can Manage your todos <Link to='/todos'>here </Link>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n// the LoginComponent a controlled component.\r\nclass LoginComponent extends Component{\r\n    constructor(props){\r\n        super(props)\r\n//We added state to this Logincomponent.\r\n        this.state ={\r\n            username: '',\r\n            password: '',\r\n            hasloFailed: false,\r\n            showSucssMess: false,\r\n\r\n        }\r\n    \r\n        this.handelChange=this.handelChange.bind(this);\r\n        this.loginClicked=this.loginClicked.bind(this);\r\n    }\r\n\r\n   \r\n    // Added a generic event to handle all changes for any text element and we are now able to update the state whenever somebody types in something.\r\n\r\n    handelChange(event){\r\n       // this prints the state before the handleChange().\r\n        console.log(this.state);\r\n\r\n        this.setState({\r\n            [event.target.name]\r\n            : event.target.value\r\n        }\r\n        )\r\n\r\n    }\r\n\r\n    loginClicked(){\r\n        if(this.state.username==='wael' && this.state.password===\"1234\"){\r\n            this.props.history.push(`/welcome/${this.state.username}`)\r\n            //this.setState({showSucssMess:true})\r\n            //this.setState({hasloFailed:false})\r\n\r\n        }\r\n            \r\n        else{\r\n            console.log('Failed') \r\n\r\n            this.setState({showSucssMess:false})\r\n\r\n            this.setState({hasloFailed:true})\r\n\r\n        }\r\n\r\n        //console.log(this.state)\r\n\r\n    }\r\n\r\n\r\n    render(){\r\n      return(\r\n          <div>\r\n                {/*<ShowInvalidInserts hasloFailed={this.state.hasloFailed} />*/}\r\n                {this.state.hasloFailed && <div>Invalid Insertes</div>}\r\n                {this.state.showSucssMess && <div>Login Succefuly</div>}\r\n                {/*<ShowLoginSucc showSucssMess={this.state.showSucssMess} />*/}\r\n                User Name: <input type=\"text\" name=\"username\" value={this.state.username} onChange={this.handelChange}/>\r\n                Password: <input type=\"password\" name=\"password\" value={this.state.password} onChange={this.handelChange}/>\r\n                <button onClick={this.loginClicked}>Login</button>\r\n            </div>\r\n        );\r\n    }\r\n  }\r\n\r\nexport default TodoApp;",{"ruleId":"23","replacedBy":"24"},{"ruleId":"25","replacedBy":"26"},{"ruleId":"27","severity":1,"message":"28","line":91,"column":26,"nodeType":"29","endLine":91,"endColumn":54},"no-native-reassign",["30"],"no-negated-in-lhs",["31"],"jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-global-assign","no-unsafe-negation"]